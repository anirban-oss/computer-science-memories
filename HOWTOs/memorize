do not try to understand the whole before you understand the parts
do not understand the parts before you understand how it affects the whole

when you are learning something like Data Structures and Algorithms
Do not try to understand the whole without learning the configurations and synergy and working of the parts of the puzzle

when you are learning a program of a project or a program for solving a problem
DO NOT TRY TO question the language when you are learning how the project works the first time
when you are learning about a project try to see only the one level down abstractions of the code and how do they interact with each other to give the productivity or solution to the project/problem.

One does not try to learn how to make a capacitor if the job is to only change one bad capacitor to a new capacitor and switch on the application to run the fan and get the flow of air directed towards you.

you only need to learn the abstractions of the project and work the thing that is intended to be corrected and run.

To run a fan, you only need to know how to connect wires and change the capacitors, basically how to connect different parts of a readymade product.
To run a fan, one does not need to understand how electro-magnetism works.

To run a code, one only needs to know how to translate a literary/mathematical problem into a computational framework which was previously being done by human beings and now its being done to near or better precision than human beings.
To run a code, one does not  need to understand how the coding works with the interpreter, how it compiles or anything like that in major sense of the problem, but the better you know about the language or maths used to solve the problem, you can write efficient and fast answers to the cause or the problem.

one should learn more about the language as one solves different problems in his life more and more.
you should not try to learn the language in isolation, it should happen auxillary to solving the real problem as fast and efficiently as possible.

one should learn the language as much as one should learn the basic ways of problem solving, meaning learn how to solve different math problems, english communication and writing problems.

Before computational thinking, one should be able to know that something is solvable and also how to solve that. Then you convert that real process into computational framework and code using computational thinking.

When you see any DSA problem, learn from which context the question is being asked. 
If it actually comes from the data structures or the algorithms. learn how to understand and do them and use them like you know how to with the physics problems and scineces and also the arts and logic structures of it.

From what i understand, we may be able to create DALL-E but we are far from actually helping human beings do anything.
Yes computer can write and do anything, but if its not useful and enjoyable to human beings, its meaningless and humans will be needed again for the same task to be done.
With time, human needs will change as AI does some work in a better way and new jobs will be created for human beings to do.

---

do not try to learn all the primitives of the programming language that you are learning.
try to learn the basic operations using the language, 
you dont even need to do hello_world programming in every language
you do the most basic thing that is available in that project or problem, you solve it first and then you move on to bigger challenges, do not do things that you dont need to do for no reason, if you dont need to know the history of something to learn how to use it fully, then fuck that, its not primary, its not important, learn the history of only that thing which has given back to you more than anything and has become a part of you or your history

In school we are taught to never question and get fucked every way of the day and memorize and learn anything that is presented to us.
This is the wrong way, learn and spend energy and love only on things that are useful to you.

If learning how to work the language is the main aim, then learn that first and everything else second.
Learn the how to of the language, use it and then think of everything else after the aim has been reached.
Learn HTML5, CSS3, JavaScript to make a website and memorize what all things that you need to create a website from any laptop or computational object available to you.
Learn python so that you can take care of the backend. Learn it so you can do it with bash scripting.
Do not need to learn how python works and why, learn how to use the productivity that is given to you by python programming language.
Learn how will you use loops to do the stuff that you need to. You dont need to learn how the loops work internally in python, let that headache be taken by the computer science Phd's and python geeks
