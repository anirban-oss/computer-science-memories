# i write anything that i want here and organize for the right file later
i am learning more and more from the same lecture of Prof Eric Grimson on intro to CS and programming

i love the fact that programming and computation is just a recipe and literally nothing else than that.

Python is just a language just like anything else in this world
You can only do stuff like communication with a language nothing else
What you can do with python, you can do with english and you can do with maths
Its just that these things help at different things more than the other.

And the fact that our brain can fall into infinite loops even in the easiest of challenges if the test is set in such a way.
The only way you get out of it like Ctrl+C is only through the people around you or some physical limitation that crashes you from doing it

The best we can do is try to do as we see things getting done and hope for the best
Luck is a very important thing and it has no morality, you get anything.

---

tried learning maths and other things for no reason all of a sudden from the heron of alexandria square root trigger and from that to exponentiation and finally to exponential function graph, why does negative integers, zero and one is not considered in that range
how to math, tried translating exponentiation in terms of addition and failed in some ways and won too, i will try that again tomorrow sometime
i failed to study intro to cs only, i failed to study how to speak too.
i plan to organize myself tomorrow and study intro to CS in better way.
memorization copy, practice copy, repetitions copy, teaching copy and neither official understanding copy has been made yet after years of trying.
what is your plan tomorrow?
  study intro to cs
  check the streak of deepstash and github
  post something on twitter, a tweet thread or something like that
  prepare something for youtube based on your day
  get open source prep too
  try out replit 100 days of code again
  practice coding somewhere like hackerrank, etc

---

Today is mine. I will study Intro to CS and Programming very well!
I learnt through sheer force that choosing what to repeat is the most essential thing of the day, whether you choose to be kind repeatedly, helpful, it matters!
I learnt that any imperative knowledge begins with a guess, with experience a better guess but a guess still!
nobody knows everything and they face challenges all the time, nobody has figured it out, so you got the chance that you want to live and try your best!
just go forward each day with the next logical thing with repetitions so you really drill down the learning to your subconscious and can access it whenever you need it.
work very hard and be easy to work with others
fame is a drug, its like antigravity, a metaphor i heard from conan o'brien, it makes you lose track of reality and makes you fall bad when the drug isnt there.
expect difficulties as you grow up each day, but also that you are enough to deal with them. 
Dont worry, be free, give your best to everyday and make it yours, carpe diem
we dont get perfect days handed to us, we make days perfect by our attitude towards them.

---

What will you repeat today to learn?
I will repeat the lectures of Eric Grimson from Intro to CS & Programming Fall 2008.
Each lecture is 1 hour on average, so i got chance to repeat them about 8 times with ease.
I love it, i love everything.

---

How to crack the code of perfect computer science study sessions in the morning?
    *what does one mean by cracking the code?
    It means to guess everyday or in every repetition of the process, for the right answer, or improving the process that you know works for the shit you are doing but its not customized to your liking and you just want to know which factor to change to customize it perfectly.
I am studying lecture 1 of Intro to CS & Prog for a week now, but I still dont think I have managed to learn all that is being said there, i dont have the lecture memorized, i have not made proper questions from the lecture to test myself on it.

now edit from the local host machine, try git pull and continue editing there, yes it worked and i am editing now from vi of fedora os. thanks!

Tomorrow, I plan to move beyond the first lecture, you know what he said in the
first on average, first he discusses the goals, strategic and tactical ones,
aim and focus of the course on people who have poor or no coding experience,
then he talks about computational thinkng and computation in general, how to
think of that? Computation is nothing but glorified recipe making, probably for
the things inside the machine rather than real food, whatever you want to make,
learn the process and don't question unnecessarily, and then you talk about
interpreters as the heart of computer is misstatement, fixed programme
computers, stored program computers, atanasoff 1941 for linear equations,
program counter as the basis of computation, moving on to syntax, static
semantics, full semantics and style of writing code, give me six primitives and i can rule the world, dimensions of a programming language, high or low, general or targetted, interpreted or compiled, python as high level, general, interpreted language, alan turing, turing compatibility, computataion is a recipe, error detection easiest in syntax level, difficult in static semantics, not available in full semantic

syntax - what are the legal expressions in the language
static semantic - what programs are meaningful, not whether the right meaning or wrong, just if it tries any meaning or not
full semantic - what does the program mean? what will happen when you run it? will you get the right answer that you are looking for?

i love that the teacher said that for any problem concerning laptop of digital medium, i want you to think how to write some code to solve this.

compuatational thinking
understand code
capabilities and limitations of computation
mapping scientific problems into compuatational framework


